{"ast":null,"code":"import _regeneratorRuntime from\"/home/sumeet/Desktop/New Folder/Qkart/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/home/sumeet/Desktop/New Folder/Qkart/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/sumeet/Desktop/New Folder/Qkart/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectSpread from\"/home/sumeet/Desktop/New Folder/Qkart/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{CreditCard,Delete}from\"@mui/icons-material\";import{Button,Divider,Grid,Stack,TextField,Typography}from\"@mui/material\";import{Box}from\"@mui/system\";import axios from\"axios\";import{useSnackbar}from\"notistack\";import React,{useEffect,useState}from\"react\";import{useHistory}from\"react-router-dom\";import{config}from\"../App\";import Cart,{getTotalCartValue,generateCartItemsFrom}from\"./Cart\";import\"./Checkout.css\";import Footer from\"./Footer\";import Header from\"./Header\";// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n *\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */ /**\n * @typedef {Object} CartItem -  - Data on product added to cart\n *\n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} productId - Unique ID for the product\n */ /**\n * @typedef {Object} Address - Data on added address\n *\n * @property {string} _id - Unique ID for the address\n * @property {string} address - Full address string\n */ /**\n * @typedef {Object} Addresses - Data on all added addresses\n *\n * @property {Array.<Address>} all - Data on all added addresses\n * @property {string} selected - Id of the currently selected address\n */ /**\n * @typedef {Object} NewAddress - Data on the new address being typed\n *\n * @property { Boolean } isAddingNewAddress - If a new address is being added\n * @property { String} value - Latest value of the address being typed\n */ // TODO: CRIO_TASK_MODULE_CHECKOUT - Should allow to type a new address in the text field and add the new address or cancel adding new address\n/**\n * Returns the complete data on all products in cartData by searching in productsData\n *\n * @param { String } token\n *    Login token\n *\n * @param { NewAddress } newAddress\n *    Data on new address being added\n *\n * @param { Function } handleNewAddress\n *    Handler function to set the new address field to the latest typed value\n *\n * @param { Function } addAddress\n *    Handler function to make an API call to add the new address\n *\n * @returns { JSX.Element }\n *    JSX for the Add new address view\n *\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var AddNewAddressView=function AddNewAddressView(_ref){var token=_ref.token,newAddress=_ref.newAddress,handleNewAddress=_ref.handleNewAddress,addAddress=_ref.addAddress;return/*#__PURE__*/_jsxs(Box,{display:\"flex\",flexDirection:\"column\",children:[/*#__PURE__*/_jsx(TextField,{multiline:true,minRows:4,placeholder:\"Enter your complete address\",onChange:function onChange(e){handleNewAddress(_objectSpread(_objectSpread({},newAddress),{},{isAddingNewAddress:true,value:e.target.value}));}}),/*#__PURE__*/_jsxs(Stack,{direction:\"row\",my:\"1rem\",children:[/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:function onClick(){addAddress(token,newAddress);},children:\"Add\"}),/*#__PURE__*/_jsx(Button,{variant:\"text\",onClick:function onClick(){handleNewAddress(_objectSpread(_objectSpread({},newAddress),{},{isAddingNewAddress:false}));},children:\"Cancel\"})]})]});};var Checkout=function Checkout(){var token=localStorage.getItem(\"token\");var history=useHistory();var _useSnackbar=useSnackbar(),enqueueSnackbar=_useSnackbar.enqueueSnackbar;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),items=_useState2[0],setItems=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),products=_useState4[0],setProducts=_useState4[1];var _useState5=useState({all:[],selected:\"\"}),_useState6=_slicedToArray(_useState5,2),addresses=_useState6[0],setAddresses=_useState6[1];var _useState7=useState({isAddingNewAddress:false,value:\"\"}),_useState8=_slicedToArray(_useState7,2),newAddress=_useState8[0],setNewAddress=_useState8[1];// Fetch the entire products list\nvar getProducts=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(\"\".concat(config.endpoint,\"/products\"));case 3:response=_context.sent;setProducts(response.data);return _context.abrupt(\"return\",response.data);case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);if(!(_context.t0.response&&_context.t0.response.status===500)){_context.next=15;break;}enqueueSnackbar(_context.t0.response.data.message,{variant:\"error\"});return _context.abrupt(\"return\",null);case 15:enqueueSnackbar(\"Could not fetch products. Check that the backend is running, reachable and returns valid JSON.\",{variant:\"error\"});case 16:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function getProducts(){return _ref2.apply(this,arguments);};}();// Fetch cart data\nvar fetchCart=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(token){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(token){_context2.next=2;break;}return _context2.abrupt(\"return\");case 2:_context2.prev=2;_context2.next=5;return axios.get(\"\".concat(config.endpoint,\"/cart\"),{headers:{Authorization:\"Bearer \".concat(token)}});case 5:response=_context2.sent;return _context2.abrupt(\"return\",response.data);case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](2);enqueueSnackbar(\"Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON.\",{variant:\"error\"});return _context2.abrupt(\"return\",null);case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[2,9]]);}));return function fetchCart(_x){return _ref3.apply(this,arguments);};}();/**\n   * Fetch list of addresses for a user\n   *\n   * API Endpoint - \"GET /user/addresses\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */var getAddresses=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(token){var response;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(token){_context3.next=2;break;}return _context3.abrupt(\"return\");case 2:console.log(\"getaddress out side working\");_context3.prev=3;_context3.next=6;return axios.get(\"\".concat(config.endpoint,\"/user/addresses\"),{headers:{Authorization:\"Bearer \".concat(token)}});case 6:response=_context3.sent;console.log(\"-----working-----\",response.data);setAddresses(_objectSpread(_objectSpread({},addresses),{},{all:response.data}));return _context3.abrupt(\"return\",response.data);case 12:_context3.prev=12;_context3.t0=_context3[\"catch\"](3);enqueueSnackbar(\"Could not fetch addresses. Check that the backend is running, reachable and returns valid JSON.\",{variant:\"error\"});return _context3.abrupt(\"return\",null);case 16:case\"end\":return _context3.stop();}}},_callee3,null,[[3,12]]);}));return function getAddresses(_x2){return _ref4.apply(this,arguments);};}();/**\n   * Handler function to add a new address and display the latest list of addresses\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { NewAddress } newAddress\n   *    Data on new address being added\n   *\n   * @returns { Array.<Address> }\n   *    Latest list of addresses\n   *\n   * API Endpoint - \"POST /user/addresses\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */var addAddress=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(token,newAddress){var response;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return axios.post(\"\".concat(config.endpoint,\"/user/addresses\"),{address:newAddress.value},{headers:{Authorization:\"Bearer \".concat(token)}});case 3:response=_context4.sent;setNewAddress(_objectSpread(_objectSpread({},newAddress),{},{isAddingNewAddress:false}));// setNewAddress({ ...newAddress, value: '' })\nsetAddresses(_objectSpread(_objectSpread({},addresses),{},{all:response.data}));return _context4.abrupt(\"return\",response.data);case 9:_context4.prev=9;_context4.t0=_context4[\"catch\"](0);if(_context4.t0.response){enqueueSnackbar(_context4.t0.response.data.message,{variant:\"error\"});}else{enqueueSnackbar(\"Could not add this address. Check that the backend is running, reachable and returns valid JSON.\",{variant:\"error\"});}case 12:case\"end\":return _context4.stop();}}},_callee4,null,[[0,9]]);}));return function addAddress(_x3,_x4){return _ref5.apply(this,arguments);};}();/**\n   * Handler function to delete an address from the backend and display the latest list of addresses\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { String } addressId\n   *    Id value of the address to be deleted\n   *\n   * @returns { Array.<Address> }\n   *    Latest list of addresses\n   *\n   * API Endpoint - \"DELETE /user/addresses/:addressId\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */var deleteAddress=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(token,addressId){var url,response;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;// TODO: CRIO_TASK_MODULE_CHECKOUT - Delete selected address from the backend and display the latest list of addresses\nurl=\"\".concat(config.endpoint,\"/user/addresses/\").concat(addressId);_context5.next=4;return axios.delete(url,{headers:{Authorization:\"Bearer \".concat(token)}});case 4:response=_context5.sent;setAddresses(_objectSpread(_objectSpread({},addresses),{},{all:response.data}));return _context5.abrupt(\"return\",response.data);case 9:_context5.prev=9;_context5.t0=_context5[\"catch\"](0);if(_context5.t0.response){enqueueSnackbar(_context5.t0.response.data.message,{variant:\"error\"});}else{enqueueSnackbar(\"Could not delete this address. Check that the backend is running, reachable and returns valid JSON.\",{variant:\"error\"});}case 12:case\"end\":return _context5.stop();}}},_callee5,null,[[0,9]]);}));return function deleteAddress(_x5,_x6){return _ref6.apply(this,arguments);};}();// TODO: CRIO_TASK_MODULE_CHECKOUT - Validate request for checkout\n/**\n   * Return if the request validation passed. If it fails, display appropriate warning message.\n   *\n   * Validation checks - show warning message with given text if any of these validation fails\n   *\n   *  1. Not enough balance available to checkout cart items\n   *    \"You do not have enough balance in your wallet for this purchase\"\n   *\n   *  2. No addresses added for user\n   *    \"Please add a new address before proceeding.\"\n   *\n   *  3. No address selected for checkout\n   *    \"Please select one shipping address to proceed.\"\n   *\n   * @param { Array.<CartItem> } items\n   *    Array of objects with complete data on products added to the cart\n   *\n   * @param { Addresses } addresses\n   *    Contains data on array of addresses and selected address id\n   *\n   * @returns { Boolean }\n   *    Whether validation passed or not\n   *\n   */var validateRequest=function validateRequest(items,addresses){if(localStorage.getItem(\"balance\")<getTotalCartValue(items)){enqueueSnackbar(\"You do not have enough balance in your wallet for this purchase\",{variant:\"error\"});return false;}else if(addresses.length===0){enqueueSnackbar(\"Please add a new address before proceeding.\",{variant:\"error\"});return false;}else if(addresses.selected===\"\"){enqueueSnackbar(\"Please select one shipping address to proceed.\",{variant:\"error\"});return false;}return true;};// TODO: CRIO_TASK_MODULE_CHECKOUT\n/**\n   * Handler function to perform checkout operation for items added to the cart for the selected address\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { Array.<CartItem } items\n   *    Array of objects with complete data on products added to the cart\n   *\n   * @param { Addresses } addresses\n   *    Contains data on array of addresses and selected address id\n   *\n   * @returns { Boolean }\n   *    If checkout operation was successful\n   *\n   * API endpoint - \"POST /cart/checkout\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *  \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *  \"success\": false,\n   *  \"message\": \"Wallet balance not sufficient to place order\"\n   * }\n   *\n   */var performCheckout=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(token,items,addresses){var response;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(!validateRequest(items,addresses)){_context6.next=13;break;}_context6.prev=1;_context6.next=4;return axios.post(\"\".concat(config.endpoint,\"/cart/checkout\"),{addressId:addresses.selected},{headers:{Authorization:\"Bearer \".concat(token)}});case 4:response=_context6.sent;//   if (response.data) {\nlocalStorage.setItem(\"balance\",localStorage.getItem(\"balance\")-getTotalCartValue(items));enqueueSnackbar(\"Order placed successfully\",{variant:\"success\"});history.push(\"/thanks\");// }\n_context6.next=13;break;case 10:_context6.prev=10;_context6.t0=_context6[\"catch\"](1);if(_context6.t0.response){enqueueSnackbar(_context6.t0.response.data.message,{variant:\"error\"});}else{enqueueSnackbar(\"Could not delete this address. Check that the backend is running, reachable and returns valid JSON.\",{variant:\"error\"});}case 13:case\"end\":return _context6.stop();}}},_callee6,null,[[1,10]]);}));return function performCheckout(_x7,_x8,_x9){return _ref7.apply(this,arguments);};}();//TODO: CRIO_TASK_MODULE_CHECKOUT - Fetch addressses if logged in, otherwise show info message and redirect to Products page\n// console.log(localStorage.getItem(\"token\"));\n// Fetch products and cart data on page load\nuseEffect(function(){var onLoadHandler=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(){var productsData,cartData,cartDetails;return _regeneratorRuntime().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:if(!localStorage.getItem(\"token\")){_context7.next=16;break;}console.log(\"if is working\");getAddresses(localStorage.getItem(\"token\"));_context7.next=5;return getProducts();case 5:productsData=_context7.sent;_context7.next=8;return fetchCart(token);case 8:cartData=_context7.sent;if(!(productsData&&cartData)){_context7.next=14;break;}_context7.next=12;return generateCartItemsFrom(cartData,productsData);case 12:cartDetails=_context7.sent;setItems(cartDetails);case 14:_context7.next=18;break;case 16:enqueueSnackbar(\"you need to log in before checkout\");history.push(\"/\");case 18:case\"end\":return _context7.stop();}}},_callee7);}));return function onLoadHandler(){return _ref8.apply(this,arguments);};}();onLoadHandler();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(Grid,{container:true,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:9,children:/*#__PURE__*/_jsxs(Box,{className:\"shipping-container\",minHeight:\"100vh\",children:[/*#__PURE__*/_jsx(Typography,{color:\"#3C3C3C\",variant:\"h4\",my:\"1rem\",children:\"Shipping\"}),/*#__PURE__*/_jsx(Typography,{color:\"#3C3C3C\",my:\"1rem\",children:\"Manage all the shipping addresses you want. This way you won't have to enter the shipping address manually with every order. Select the address you want to get your order delivered.\"}),/*#__PURE__*/_jsx(Divider,{}),addresses.all.length===0?/*#__PURE__*/_jsx(Typography,{my:\"1rem\",children:\"No addresses found for this account. Please add one to proceed\"}):addresses.all.map(function(data){return/*#__PURE__*/_jsxs(Box,{className:\"address-item \".concat(addresses.selected?\"selected\":\"not-selected\"),onClick:function onClick(e){setAddresses(function(currAddress){return _objectSpread(_objectSpread({},currAddress),{},{selected:data._id});});},children:[/*#__PURE__*/_jsx(Typography,{variant:\"p\",children:data.address}),/*#__PURE__*/_jsx(Button,{variant:\"text\",startIcon:/*#__PURE__*/_jsx(Delete,{}),onClick:function onClick(event){deleteAddress(token,data._id);},children:\"DELETE\"})]},data._id);}),!newAddress.isAddingNewAddress?/*#__PURE__*/_jsx(Button,{color:\"primary\",variant:\"contained\",id:\"add-new-btn\",size:\"large\",onClick:function onClick(){setNewAddress(function(currNewAddress){return _objectSpread(_objectSpread({},currNewAddress),{},{isAddingNewAddress:true});});},children:\"Add new address\"}):/*#__PURE__*/_jsx(AddNewAddressView,{token:token,newAddress:newAddress,handleNewAddress:setNewAddress,addAddress:addAddress}),/*#__PURE__*/_jsx(Typography,{color:\"#3C3C3C\",variant:\"h4\",my:\"1rem\",children:\"Payment\"}),/*#__PURE__*/_jsx(Typography,{color:\"#3C3C3C\",my:\"1rem\",children:\"Payment Method\"}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsxs(Box,{my:\"1rem\",children:[/*#__PURE__*/_jsx(Typography,{children:\"Wallet\"}),/*#__PURE__*/_jsxs(Typography,{children:[\"Pay $\",getTotalCartValue(items),\" of available $\",localStorage.getItem(\"balance\")]})]}),/*#__PURE__*/_jsx(Button,{startIcon:/*#__PURE__*/_jsx(CreditCard,{}),variant:\"contained\",onClick:function onClick(){performCheckout(token,items,addresses);},children:\"PLACE ORDER\"})]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:3,bgcolor:\"#E9F5E1\",children:/*#__PURE__*/_jsx(Cart,{isReadOnly:true,products:products,items:items})})]}),/*#__PURE__*/_jsx(Footer,{})]});};export default Checkout;","map":{"version":3,"names":["CreditCard","Delete","Button","Divider","Grid","Stack","TextField","Typography","Box","axios","useSnackbar","React","useEffect","useState","useHistory","config","Cart","getTotalCartValue","generateCartItemsFrom","Footer","Header","AddNewAddressView","token","newAddress","handleNewAddress","addAddress","e","isAddingNewAddress","value","target","Checkout","localStorage","getItem","history","enqueueSnackbar","items","setItems","products","setProducts","all","selected","addresses","setAddresses","setNewAddress","getProducts","get","endpoint","response","data","status","message","variant","fetchCart","headers","Authorization","getAddresses","console","log","post","address","deleteAddress","addressId","url","delete","validateRequest","length","performCheckout","setItem","push","onLoadHandler","productsData","cartData","cartDetails","map","currAddress","_id","event","currNewAddress"],"sources":["/home/sumeet/Desktop/New Folder/Qkart/src/components/Checkout.js"],"sourcesContent":["import { CreditCard, Delete } from \"@mui/icons-material\";\nimport {\n  Button,\n  Divider,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Cart, { getTotalCartValue, generateCartItemsFrom } from \"./Cart\";\nimport \"./Checkout.css\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\n\n// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n *\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem -  - Data on product added to cart\n *\n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} productId - Unique ID for the product\n */\n\n/**\n * @typedef {Object} Address - Data on added address\n *\n * @property {string} _id - Unique ID for the address\n * @property {string} address - Full address string\n */\n\n/**\n * @typedef {Object} Addresses - Data on all added addresses\n *\n * @property {Array.<Address>} all - Data on all added addresses\n * @property {string} selected - Id of the currently selected address\n */\n\n/**\n * @typedef {Object} NewAddress - Data on the new address being typed\n *\n * @property { Boolean } isAddingNewAddress - If a new address is being added\n * @property { String} value - Latest value of the address being typed\n */\n\n// TODO: CRIO_TASK_MODULE_CHECKOUT - Should allow to type a new address in the text field and add the new address or cancel adding new address\n/**\n * Returns the complete data on all products in cartData by searching in productsData\n *\n * @param { String } token\n *    Login token\n *\n * @param { NewAddress } newAddress\n *    Data on new address being added\n *\n * @param { Function } handleNewAddress\n *    Handler function to set the new address field to the latest typed value\n *\n * @param { Function } addAddress\n *    Handler function to make an API call to add the new address\n *\n * @returns { JSX.Element }\n *    JSX for the Add new address view\n *\n */\nconst AddNewAddressView = ({\n  token,\n  newAddress,\n  handleNewAddress,\n  addAddress,\n}) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <TextField\n        multiline\n        minRows={4}\n        placeholder=\"Enter your complete address\"\n        onChange={(e) => {\n          handleNewAddress({\n            ...newAddress,\n            isAddingNewAddress: true,\n            value: e.target.value,\n          });\n        }}\n      />\n      <Stack direction=\"row\" my=\"1rem\">\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            addAddress(token, newAddress);\n          }}\n        >\n          Add\n        </Button>\n        <Button\n          variant=\"text\"\n          onClick={() => {\n            handleNewAddress({ ...newAddress, isAddingNewAddress: false });\n          }}\n        >\n          Cancel\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n\nconst Checkout = () => {\n  const token = localStorage.getItem(\"token\");\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const [items, setItems] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [addresses, setAddresses] = useState({ all: [], selected: \"\" });\n  const [newAddress, setNewAddress] = useState({\n    isAddingNewAddress: false,\n    value: \"\",\n  });\n\n  // Fetch the entire products list\n  const getProducts = async () => {\n    try {\n      const response = await axios.get(`${config.endpoint}/products`);\n\n      setProducts(response.data);\n      return response.data;\n    } catch (e) {\n      if (e.response && e.response.status === 500) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n        return null;\n      } else {\n        enqueueSnackbar(\n          \"Could not fetch products. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  // Fetch cart data\n  const fetchCart = async (token) => {\n    if (!token) return;\n    try {\n      const response = await axios.get(`${config.endpoint}/cart`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      return response.data;\n    } catch {\n      enqueueSnackbar(\n        \"Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON.\",\n        {\n          variant: \"error\",\n        }\n      );\n      return null;\n    }\n  };\n\n  /**\n   * Fetch list of addresses for a user\n   *\n   * API Endpoint - \"GET /user/addresses\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const getAddresses = async (token) => {\n    if (!token) return;\n    console.log(\"getaddress out side working\");\n    try {\n      const response = await axios.get(`${config.endpoint}/user/addresses`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      console.log(\"-----working-----\", response.data);\n      setAddresses({ ...addresses, all: response.data });\n      return response.data;\n    } catch {\n      enqueueSnackbar(\n        \"Could not fetch addresses. Check that the backend is running, reachable and returns valid JSON.\",\n        {\n          variant: \"error\",\n        }\n      );\n      return null;\n    }\n  };\n\n  /**\n   * Handler function to add a new address and display the latest list of addresses\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { NewAddress } newAddress\n   *    Data on new address being added\n   *\n   * @returns { Array.<Address> }\n   *    Latest list of addresses\n   *\n   * API Endpoint - \"POST /user/addresses\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const addAddress = async (token, newAddress) => {\n    try {\n      // TODO: CRIO_TASK_MODULE_CHECKOUT - Add new address to the backend and display the latest list of addresses\n      const response = await axios.post(\n        `${config.endpoint}/user/addresses`,\n        { address: newAddress.value },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      setNewAddress({ ...newAddress, isAddingNewAddress: false });\n      // setNewAddress({ ...newAddress, value: '' })\n      setAddresses({ ...addresses, all: response.data });\n      return response.data;\n    } catch (e) {\n      if (e.response) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not add this address. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  /**\n   * Handler function to delete an address from the backend and display the latest list of addresses\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { String } addressId\n   *    Id value of the address to be deleted\n   *\n   * @returns { Array.<Address> }\n   *    Latest list of addresses\n   *\n   * API Endpoint - \"DELETE /user/addresses/:addressId\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const deleteAddress = async (token, addressId) => {\n    try {\n      // TODO: CRIO_TASK_MODULE_CHECKOUT - Delete selected address from the backend and display the latest list of addresses\n      const url = `${config.endpoint}/user/addresses/${addressId}`;\n      const response = await axios.delete(url, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      setAddresses({ ...addresses, all: response.data });\n      return response.data;\n    } catch (e) {\n      if (e.response) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not delete this address. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_CHECKOUT - Validate request for checkout\n  /**\n   * Return if the request validation passed. If it fails, display appropriate warning message.\n   *\n   * Validation checks - show warning message with given text if any of these validation fails\n   *\n   *  1. Not enough balance available to checkout cart items\n   *    \"You do not have enough balance in your wallet for this purchase\"\n   *\n   *  2. No addresses added for user\n   *    \"Please add a new address before proceeding.\"\n   *\n   *  3. No address selected for checkout\n   *    \"Please select one shipping address to proceed.\"\n   *\n   * @param { Array.<CartItem> } items\n   *    Array of objects with complete data on products added to the cart\n   *\n   * @param { Addresses } addresses\n   *    Contains data on array of addresses and selected address id\n   *\n   * @returns { Boolean }\n   *    Whether validation passed or not\n   *\n   */\n  const validateRequest = (items, addresses) => {\n    if (localStorage.getItem(\"balance\") < getTotalCartValue(items)) {\n      enqueueSnackbar(\n        \"You do not have enough balance in your wallet for this purchase\",\n        { variant: \"error\" }\n      );\n      return false;\n    } else if (addresses.length === 0) {\n      enqueueSnackbar(\"Please add a new address before proceeding.\", {\n        variant: \"error\",\n      });\n      return false;\n    } else if (addresses.selected === \"\") {\n      enqueueSnackbar(\"Please select one shipping address to proceed.\", {\n        variant: \"error\",\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  // TODO: CRIO_TASK_MODULE_CHECKOUT\n  /**\n   * Handler function to perform checkout operation for items added to the cart for the selected address\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { Array.<CartItem } items\n   *    Array of objects with complete data on products added to the cart\n   *\n   * @param { Addresses } addresses\n   *    Contains data on array of addresses and selected address id\n   *\n   * @returns { Boolean }\n   *    If checkout operation was successful\n   *\n   * API endpoint - \"POST /cart/checkout\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *  \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *  \"success\": false,\n   *  \"message\": \"Wallet balance not sufficient to place order\"\n   * }\n   *\n   */\n  const performCheckout = async (token, items, addresses) => {\n    if (validateRequest(items, addresses)) {\n      try {\n        // eslint-disable-next-line\n        const response = await axios.post(\n          `${config.endpoint}/cart/checkout`,\n          { addressId: addresses.selected },\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        );\n\n        //   if (response.data) {\n        localStorage.setItem(\n          \"balance\",\n          localStorage.getItem(\"balance\") - getTotalCartValue(items)\n        );\n        enqueueSnackbar(\"Order placed successfully\", {\n          variant: \"success\",\n        });\n        history.push(\"/thanks\");\n        // }\n      } catch (error) {\n        if (error.response) {\n          enqueueSnackbar(error.response.data.message, { variant: \"error\" });\n        } else {\n          enqueueSnackbar(\n            \"Could not delete this address. Check that the backend is running, reachable and returns valid JSON.\",\n            {\n              variant: \"error\",\n            }\n          );\n        }\n      }\n    }\n  };\n\n  //TODO: CRIO_TASK_MODULE_CHECKOUT - Fetch addressses if logged in, otherwise show info message and redirect to Products page\n\n  // console.log(localStorage.getItem(\"token\"));\n  // Fetch products and cart data on page load\n  useEffect(() => {\n    const onLoadHandler = async () => {\n      if (localStorage.getItem(\"token\")) {\n        console.log(\"if is working\");\n\n        getAddresses(localStorage.getItem(\"token\"));\n\n        const productsData = await getProducts();\n\n        const cartData = await fetchCart(token);\n\n        if (productsData && cartData) {\n          const cartDetails = await generateCartItemsFrom(\n            cartData,\n            productsData\n          );\n          setItems(cartDetails);\n        }\n      } else {\n        enqueueSnackbar(\"you need to log in before checkout\");\n        history.push(\"/\");\n      }\n    };\n    onLoadHandler();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <Grid container>\n        <Grid item xs={12} md={9}>\n          <Box className=\"shipping-container\" minHeight=\"100vh\">\n            <Typography color=\"#3C3C3C\" variant=\"h4\" my=\"1rem\">\n              Shipping\n            </Typography>\n            <Typography color=\"#3C3C3C\" my=\"1rem\">\n              Manage all the shipping addresses you want. This way you won't\n              have to enter the shipping address manually with every order.\n              Select the address you want to get your order delivered.\n            </Typography>\n            <Divider />\n            {addresses.all.length === 0 ? (\n              <Typography my=\"1rem\">\n                No addresses found for this account. Please add one to proceed\n              </Typography>\n            ) : (\n              addresses.all.map((data) => (\n                <Box\n                  className={`address-item ${\n                    addresses.selected ? \"selected\" : \"not-selected\"\n                  }`}\n                  key={data._id}\n                  onClick={(e) => {\n                    setAddresses((currAddress) => ({\n                      ...currAddress,\n                      selected: data._id,\n                    }));\n                  }}\n                >\n                  <Typography variant=\"p\">{data.address}</Typography>\n                  <Button\n                    variant=\"text\"\n                    startIcon={<Delete />}\n                    onClick={(event) => {\n                      deleteAddress(token, data._id);\n                    }}\n                  >\n                    DELETE\n                  </Button>\n                </Box>\n              ))\n            )}\n            {/* TODO: CRIO_TASK_MODULE_CHECKOUT - Dislay either \"Add new address\" button or the <AddNewAddressView> component to edit the currently selected address */}\n            {!newAddress.isAddingNewAddress ? (\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                id=\"add-new-btn\"\n                size=\"large\"\n                onClick={() => {\n                  setNewAddress((currNewAddress) => ({\n                    ...currNewAddress,\n                    isAddingNewAddress: true,\n                  }));\n                }}\n              >\n                Add new address\n              </Button>\n            ) : (\n              <AddNewAddressView\n                token={token}\n                newAddress={newAddress}\n                handleNewAddress={setNewAddress}\n                addAddress={addAddress}\n              />\n            )}\n\n            <Typography color=\"#3C3C3C\" variant=\"h4\" my=\"1rem\">\n              Payment\n            </Typography>\n            <Typography color=\"#3C3C3C\" my=\"1rem\">\n              Payment Method\n            </Typography>\n            <Divider />\n\n            <Box my=\"1rem\">\n              <Typography>Wallet</Typography>\n              <Typography>\n                Pay ${getTotalCartValue(items)} of available $\n                {localStorage.getItem(\"balance\")}\n              </Typography>\n            </Box>\n\n            <Button\n              startIcon={<CreditCard />}\n              variant=\"contained\"\n              onClick={() => {\n                performCheckout(token, items, addresses);\n              }}\n            >\n              PLACE ORDER\n            </Button>\n          </Box>\n        </Grid>\n        <Grid item xs={12} md={3} bgcolor=\"#E9F5E1\">\n          <Cart isReadOnly products={products} items={items} />\n        </Grid>\n      </Grid>\n      <Footer />\n    </>\n  );\n};\n\nexport default Checkout;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}