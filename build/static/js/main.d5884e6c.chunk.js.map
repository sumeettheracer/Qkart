{"version":3,"sources":["components/Footer.js","components/Header.js","components/Register.js","components/Login.js","components/Cart.js","components/ProductCard.js","components/Products.js","components/Checkout.js","components/Thanks.js","theme.js","App.js","index.js"],"names":["Footer","Box","className","src","alt","Header","children","hasHiddenAuthButtons","history","useHistory","Button","startIcon","variant","onClick","push","localStorage","getItem","Stack","direction","spacing","Avatar","Typography","gutterBottom","removeItem","window","location","reload","varient","Register","props","enqueueSnackbar","useSnackbar","useState","username","password","confirmPassword","formData","setform","isLoading","setIsLoding","success","setSuccess","useEffect","register","validateInput","axios","post","config","endpoint","then","res","data","catch","e","response","status","message","length","handelchange","value","target","name","display","flexDirection","justifyContent","minHeight","TextField","id","label","title","placeholder","onChange","fullWidth","type","helperText","CircularProgress","preventDefault","to","Login","login","persistLogin","token","balance","setItem","generateCartItemsFrom","cartData","productsData","productIds","map","item","productId","filteredProducts","filter","product","includes","_id","index","qty","category","cost","rating","image","getTotalCartValue","items","totalValue","reduce","sum","ItemQuantity","handleAdd","handleDelete","alignItems","IconButton","size","color","RemoveOutlined","padding","AddOutlined","Cart","products","handleQuantity","isReadOnly","width","height","paddingX","fontWeight","alignSelf","fontSize","ShoppingCart","ShoppingCartOutlined","textAlign","ProductCard","handleAddToCart","Card","CardMedia","component","CardContent","sx","Rating","readOnly","AddShoppingCartOutlined","Products","setProducts","setIsLoading","debounceTimeout","setDebounceTimeout","fetchedCart","setFetchedCart","cartList","setCartList","performAPICall","url","get","performSearch","text","erres","console","log","debounceSearch","event","clearTimeout","timeout","setTimeout","fetchCart","headers","callApi","getProducts","getCart","isItemInCart","addToCart","options","preventDuplicate","Authorization","InputProps","endAdornment","InputAdornment","position","Search","Grid","container","md","xs","marginTop","SentimentDissatisfied","sm","bgcolor","AddNewAddressView","newAddress","handleNewAddress","addAddress","multiline","minRows","isAddingNewAddress","my","Checkout","setItems","all","selected","addresses","setAddresses","setNewAddress","getAddresses","address","deleteAddress","addressId","delete","validateRequest","performCheckout","onLoadHandler","cartDetails","Divider","currAddress","Delete","currNewAddress","CreditCard","Thanks","theme","createTheme","typography","fontFamily","variantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","palette","primary","light","main","dark","contrastText","App","StrictMode","ThemeProvider","exact","path","ReactDOM","render","maxSnack","anchorOrigin","vertical","horizontal","document","getElementById"],"mappings":"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","file":"static/js/main.d5884e6c.chunk.js","sourcesContent":["import { Box } from \"@mui/system\";\nimport React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => {\n  return (\n    <Box className=\"footer\">\n      <Box>\n        <img src=\"logo_dark.svg\" alt=\"QKart-icon\"></img>\n      </Box>\n      <p className=\"footer-text\">\n        QKart is your one stop solution to the buy the latest trending items\n        with India's Fastest Delivery to your doorstep\n      </p>\n    </Box>\n  );\n};\n\nexport default Footer;\n","import ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport { Avatar, Button, Stack, Typography,} from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport React from \"react\";\nimport \"./Header.css\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Header = ({ children, hasHiddenAuthButtons }) => {\n  const history = useHistory();\n  const register = () => {\n    history.push(\"/register\");\n  };\n  const login = () => {\n    history.push(\"/login\");\n  };\n  const explore = () => {\n    history.push(\"/\");\n  };\n  const logout = () => {\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"balance\");\n    window.location.reload();\n    history.push(\"/\")\n  };\n  if (hasHiddenAuthButtons === true) {\n    return (\n      <Box className=\"header\">\n        <Box className=\"header-title\">\n          <img src=\"logo_light.svg\" alt=\"QKart-icon\"></img>\n        </Box>\n        <Button\n          className=\"explore-button\"\n          startIcon={<ArrowBackIcon />}\n          variant=\"text\"\n          onClick={explore}\n        >\n          Back to explore\n        </Button>\n      </Box>\n    );\n  }\n  if (localStorage.getItem(\"username\")) {\n    return (\n      <Box className=\"header\">\n        <Box className=\"header-title\">\n          <img src=\"logo_light.svg\" alt=\"QKart-icon\"></img>\n        </Box>\n        {children}\n        <Stack direction=\"row\" spacing={2}>\n          <Avatar alt={localStorage.getItem(\"username\")} src=\"avatar.png\" />\n          <Typography variant=\"h6\" gutterBottom >\n            {localStorage.getItem(\"username\")}\n          </Typography>\n          <Button className=\"explore-button\" variant=\"text\" onClick={logout}>\n            Logout\n          </Button>\n        </Stack>\n      </Box>\n    );\n  } else {\n    return (\n      <Box className=\"header\">\n        <Box className=\"header-title\">\n          <img src=\"logo_light.svg\" alt=\"QKart-icon\"></img>\n        </Box>\n        {children}\n        <Box className=\"login-register\">\n          <Button className=\"login-button\" varient=\"text\" onClick={login}>\n            LOGIN\n          </Button>\n          <Button\n            className=\"register-button\"\n            variant=\"contained\"\n            onClick={register}\n          >\n            REGISTER\n          </Button>\n        </Box>\n      </Box>\n    );\n  }\n  // return (\n  //   <Box className=\"header\">\n  //     <Box className=\"header-title\">\n  //       <img src=\"logo_light.svg\" alt=\"QKart-icon\"></img>\n  //     </Box>\n  //     {localStorage.getItem(\"username\") ? (\n  //       <Stack direction=\"row\" spacing={2}>\n  //         <Avatar alt={localStorage.getItem(\"username\")} src=\"avatar.png\" />\n  //         <Typography variant=\"h6\" gutterBottom component=\"div\">\n  //           {localStorage.getItem(\"username\")}\n  //         </Typography>\n  //         <Button className=\"explore-button\" variant=\"text\" onClick={logout}>\n  //           Logout\n  //         </Button>\n  //       </Stack>\n  //     ) : (\n  //       <Box className=\"login-register\">\n  //         <Button className=\"login-button\" varient=\"text\" onClick={login}>\n  //           LOGIN\n  //         </Button>\n  //         <Button\n  //           className=\"register-button\"\n  //           variant=\"contained\"\n  //           onClick={register}\n  //         >\n  //           REGISTER\n  //         </Button>\n  //       </Box>\n  //     )}\n  //   </Box>\n  // );\n};\n\nexport default Header;\n","import { Button, CircularProgress, Stack, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState, useEffect } from \"react\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Register.css\";\n\nconst Register = (props) => {\n  const { enqueueSnackbar } = useSnackbar();\n  const formdatainit = {\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n  const [formData, setform] = useState(formdatainit);\n  const [isLoading, setIsLoding] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (success) {\n      history.push(\"/login\");\n    }\n  }, [success, history]);\n  const register = async (formData) => {\n    setIsLoding(true);\n    if (validateInput(formData)) {\n      await axios\n        .post(`${config.endpoint}/auth/register`, {\n          username: formData.username,\n          password: formData.password,\n        })\n        .then((res) => {\n          if (res.data.success) {\n            enqueueSnackbar(\"User registration successfully\", {\n              variant: \"success\",\n            });\n            // history.push('/login');\n          }\n        })\n        .catch((e) => {\n          setIsLoding(false);\n          if (!e.response.data.success && e.response.status === 400) {\n            enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n          } else {\n            enqueueSnackbar(\"Something went wrong!\", { variant: \"error\" });\n          }\n        });\n      }\n    setIsLoding(false);\n    setSuccess(true);\n  };\n\n  const validateInput = (data) => {\n    if (!data.username) {\n      enqueueSnackbar(\"Username is a required field\", { variant: \"error\" });\n      return false;\n    }\n    if (data.username.length < 6) {\n      enqueueSnackbar(\"Username must be at least 6 characters\", {\n        variant: \"error\",\n      });\n      return false;\n    }\n    if (!data.password) {\n      enqueueSnackbar(\"Password is a required field\", { variant: \"error\" });\n      return false;\n    }\n    if (data.password.length < 6) {\n      enqueueSnackbar(\"Password must be at least 6 characters\", {\n        variant: \"error\",\n      });\n      return false;\n    }\n    if (data.password !== data.confirmPassword) {\n      enqueueSnackbar(\"Passwords do not match\", { variant: \"error\" });\n      return false;\n    }\n    return true;\n  };\n  //handeling the change in Box.\n  const handelchange = (e) => {\n    const value = e.target.value;\n    const name = e.target.name;\n    setform({ ...formData, [name]: value });\n  };\n  const handleClick = (e) => {\n    e.preventDefault();\n    register(formData);\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      minHeight=\"100vh\"\n    >\n      <Header hasHiddenAuthButtons={true} />\n      <Box className=\"content\">\n        <Stack spacing={2} className=\"form\">\n          <h2 className=\"title\">Register</h2>\n          <TextField\n            id=\"username\"\n            label=\"Username\"\n            variant=\"outlined\"\n            title=\"Username\"\n            name=\"username\"\n            placeholder=\"Enter Username\"\n            onChange={handelchange}\n            fullWidth\n          />\n          <TextField\n            id=\"password\"\n            variant=\"outlined\"\n            label=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            helperText=\"Password must be atleast 6 characters length\"\n            fullWidth\n            placeholder=\"Enter a password with minimum 6 characters\"\n            onChange={handelchange}\n          />\n          <TextField\n            id=\"confirmPassword\"\n            variant=\"outlined\"\n            label=\"Confirm Password\"\n            name=\"confirmPassword\"\n            type=\"password\"\n            fullWidth\n            onChange={handelchange}\n          />\n          {!isLoading ? (\n            <Button\n              onClick={handleClick}\n              className=\"button\"\n              variant=\"contained\"\n            >\n              Register Now\n            </Button>\n          ) : (\n            <div className=\"loading\">\n              <CircularProgress />\n            </div>\n          )}\n          <p className=\"secondary-action\">\n            Already have an account?{\" \"}\n            <Link className=\"link\" to={`/login`}>\n              Login here\n            </Link>\n          </p>\n        </Stack>\n      </Box>\n      <Footer />\n    </Box>\n  );\n};\n\nexport default Register;\n","// eslint-disable-next-line\nimport { ConnectingAirportsOutlined } from \"@mui/icons-material\";\nimport { Button, CircularProgress, Stack, TextField,Box } from \"@mui/material\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState,useEffect } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Login.css\";\n\nconst Login = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const forminit = {\n    username: \"\",\n    password: \"\",\n  };\n  const [formData, setform] = useState(forminit);\n  const [isLoading, setIsLoding] = useState(false);\n  const [success,setSuccess]=useState(false);\n  const history = useHistory();\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Fetch the API response\n  /**\n   * Perform the Login API call\n   * @param {{ username: string, password: string }} formData\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * API endpoint - \"POST /auth/login\"\n   *\n   * Example for successful response from backend:\n   * HTTP 201\n   * {\n   *      \"success\": true,\n   *      \"token\": \"testtoken\",\n   *      \"username\": \"criodo\",\n   *      \"balance\": 5000\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Password is incorrect\"\n   * }\n   *\n   */\n  // eslint-disable-next-line\n  useEffect(()=>{\n    if(success){\n      history.push('/');\n    }\n  },[success,history])\n  const login = async (formData) => {\n    setIsLoding(true);\n    if (validateInput(formData)) {\n      await axios\n        .post(`${config.endpoint}/auth/login`, {\n          username: formData.username,\n          password: formData.password,\n        })\n        .then((res) => {\n          // console.log(res.data.success)\n          // console.log(res.data.username)\n          // console.log(res.data.balance);\n          // history.push(\"/\")\n          if (res.data.success) {\n            enqueueSnackbar(\"Logged in\", {\n              variant: \"success\",\n            });\n            persistLogin(\n              res.data.token,\n              res.data.username,\n              res.data.balance\n            );\n            setSuccess(true);\n          }\n        })\n        .catch((e) => {\n          if(!e.response.data.success&&e.response.status===400){\n            enqueueSnackbar(e.response.data.message,{varient:\"error\"})\n          }\n        });\n    }\n      setIsLoding(false);\n      \n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Validate the input\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @param {{ username: string, password: string }} data\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false and show warning message if any validation condition fails, otherwise return true.\n   * (NOTE: The error messages to be shown for each of these cases, are given with them)\n   * -    Check that username field is not an empty value - \"Username is a required field\"\n   * -    Check that password field is not an empty value - \"Password is a required field\"\n   */\n  // eslint-disable-next-line\n  const validateInput = (data) => {\n    if (!data.username) {\n      enqueueSnackbar(\"Username is a required field\", { variant: \"error\" });\n      return false;\n    }\n    if (!data.password) {\n      enqueueSnackbar(\"Password is a required field\", { variant: \"error\" });\n      return false;\n    }\n    return true;\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Persist user's login information\n  /**\n   * Store the login information so that it can be used to identify the user in subsequent API calls\n   *\n   * @param {string} token\n   *    API token used for authentication of requests after logging in\n   * @param {string} username\n   *    Username of the logged in user\n   * @param {string} balance\n   *    Wallet balance amount of the logged in user\n   *\n   * Make use of localStorage: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n   * -    `token` field in localStorage can be used to store the Oauth token\n   * -    `username` field in localStorage can be used to store the username that the user is logged in as\n   * -    `balance` field in localStorage can be used to store the balance amount in the user's wallet\n   */\n  // eslint-disable-next-line\n  const persistLogin = (token, username, balance) => {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"username\", username);\n    localStorage.setItem(\"balance\", balance);\n  };\n\n  const handelchange = (e) => {\n    const value = e.target.value;\n    const name = e.target.name;\n    setform({ ...formData, [name]: value });\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      minHeight=\"100vh\"\n    >\n      <Header hasHiddenAuthButtons={true} />\n      <Box className=\"content\">\n        <Stack spacing={2} className=\"form\">\n          <h2 className=\"title\">Login</h2>\n          <TextField\n            id=\"username\"\n            label=\"Username\"\n            variant=\"outlined\"\n            title=\"Username\"\n            name=\"username\"\n            onChange={handelchange}\n            fullWidth\n          />\n          <TextField\n            id=\"password\"\n            variant=\"outlined\"\n            label=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            fullWidth\n            onChange={handelchange}\n          />\n          {isLoading ? (\n            <div className=\"loading\">\n              <CircularProgress />\n            </div>\n          ) : (\n            <Button\n              onClick={(e) => {\n                e.preventDefault();\n                login(formData);\n              }}\n              className=\"button\"\n              variant=\"contained\"\n            >\n              LOGIN TO QKART\n            </Button>\n          )}\n          <p className=\"secondary-action\">\n            Don’t have an account?{\" \"}\n            <Link className=\"link\" to={`/register`}>\n              Register now\n            </Link>\n          </p>\n        </Stack>\n      </Box>\n      <Footer />\n    </Box>\n  );\n};\n\nexport default Login;\n","import {\n  AddOutlined,\n  RemoveOutlined,\n  ShoppingCart,\n  ShoppingCartOutlined,\n} from \"@mui/icons-material\";\nimport { Button, IconButton, Stack } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./Cart.css\";\n\n// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n * \n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem -  - Data on product added to cart\n * \n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} productId - Unique ID for the product\n */\n\n/**\n * Returns the complete data on all products in cartData by searching in productsData\n *\n * @param { Array.<{ productId: String, qty: Number }> } cartData\n *    Array of objects with productId and quantity of products in cart\n * \n * @param { Array.<Product> } productsData\n *    Array of objects with complete data on all available products\n *\n * @returns { Array.<CartItem> }\n *    Array of objects with complete data on products in cart\n *\n */\n\n\nexport const generateCartItemsFrom = (cartData, productsData) => {\n  //console.log(cartData, productsData)\n\n  const productIds = cartData?.map(item => {\n    return item.productId\n  })\n\n  const filteredProducts = productsData?.filter(product => {\n    return productIds?.includes(product._id)\n  })\n\n  const cartItems = filteredProducts?.map((data, index) => {\n    return {\n      name: data.name,\n      qty: cartData[index].qty,\n      category: data.category,\n      cost: data.cost,\n      rating: data.rating,\n      image: data.image,\n      productId: data._id,\n    };\n  })\n\n  //console.log(cartItems);\n  return cartItems\n};\n\n\n\n/**\n * Get the total value of all products added to the cart\n *\n * @param { Array.<CartItem> } items\n *    Array of objects with complete data on products added to the cart\n *\n * @returns { Number }\n *    Value of all items in the cart\n *\n */\n\nexport const getTotalCartValue = (items = []) => {\n  const totalValue = items.reduce((sum, item) => {\n    return sum + item.cost * item.qty;\n  }, 0);\n  return totalValue;\n}\n\n\nexport const getTotalItems = (items = []) => {\n  const totalQty = items.reduce((sum, ele) => {\n    return sum + ele.qty;\n  }, 0);\n  return totalQty;\n}\n\n\n/**\n * Component to display the current quantity for a product and + and - buttons to update product quantity on cart\n * \n * @param {Number} value\n *    Current quantity of product in cart\n * \n * @param {Function} handleAdd\n *    Handler function which adds 1 more of a product to cart\n * \n * @param {Function} handleDelete\n *    Handler function which reduces the quantity of a product in cart by 1\n * \n * @param {Boolean} isReadOnly\n *    If product quantity on cart is to be displayed as read only without the + - options to change quantity\n * \n */\nconst ItemQuantity = ({\n  value,\n  handleAdd,\n  handleDelete,\n}) => {\n  return (\n    <Stack direction=\"row\" alignItems=\"center\">\n      <IconButton size=\"small\" color=\"primary\" onClick={handleDelete}>\n        <RemoveOutlined />\n      </IconButton>\n      <Box padding=\"0.5rem\" data-testid=\"item-qty\">\n        {value}\n      </Box>\n      <IconButton size=\"small\" color=\"primary\" onClick={handleAdd}>\n        <AddOutlined />\n      </IconButton>\n    </Stack>\n  );\n};\n\n/**\n * Component to display the Cart view\n * \n * @param { Array.<Product> } products\n *    Array of objects with complete data of all available products\n * \n * @param { Array.<Product> } items\n *    Array of objects with complete data on products in cart\n * \n * @param {Function} handleDelete\n *    Current quantity of product in cart\n * \n * @param {Boolean} isReadOnly\n *    If product quantity on cart is to be displayed as read only without the + - options to change quantity\n * \n */\nconst Cart = ({\n  products,\n  items = [],\n  handleQuantity,\n  isReadOnly = false\n}) => {\n  const history = useHistory()\n  if (!items.length) {\n    return (\n      <Box className=\"cart empty\">\n        <ShoppingCartOutlined className=\"empty-cart-icon\" />\n        <Box color=\"#aaa\" textAlign=\"center\">\n          Cart is empty. Add more items to the cart to checkout.\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <Box className=\"cart\">\n        {/* TODO: CRIO_TASK_MODULE_CART - Display view for each cart item with non-zero quantity */}\n        {items.map((item) => {\n          return (\n            <Box\n              display=\"flex\"\n              alignItems=\"flex-start\"\n              padding=\"1rem\"\n              key={item.productId}\n            >\n              <Box className=\"image-container\">\n                <img\n                  // Add product image\n                  src={item.image}\n                  // Add product name as alt eext\n                  alt={item.name}\n                  width=\"100%\"\n                  height=\"100%\"\n                />\n              </Box>\n              <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"space-between\"\n                height=\"6rem\"\n                paddingX=\"1rem\"\n              >\n                <div>{item.name}</div>\n                <Box\n                  display=\"flex\"\n                  justifyContent=\"space-between\"\n                  alignItems=\"center\"\n                >\n                  {!isReadOnly ? (\n                    <ItemQuantity\n                      value={item.qty}\n                      handleAdd={() => {\n                        handleQuantity(\n                          localStorage.getItem(\"token\"),\n                          items,\n                          products,\n                          item.productId,\n                          item.qty + 1\n                        );\n                      }}\n                      handleDelete={() => {\n                        handleQuantity(\n                          localStorage.getItem(\"token\"),\n                          items,\n                          products,\n                          item.productId,\n                          item.qty - 1\n                        );\n                      }}\n                    // Add required props by checking implementation\n                    />\n                  ) : (\n                    <Box padding=\"0.5rem\" data-testid=\"item-qty\">\n                      Qty: {item.qty}\n                    </Box>\n                  )}\n                  <Box padding=\"0.5rem\" fontWeight=\"700\">\n                    ${item.cost}\n                  </Box>\n                </Box>\n              </Box>\n            </Box>\n          );\n        })}\n        <Box\n          padding=\"1rem\"\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Box color=\"#3C3C3C\" alignSelf=\"center\">\n            Order total\n          </Box>\n          <Box\n            color=\"#3C3C3C\"\n            fontWeight=\"700\"\n            fontSize=\"1.5rem\"\n            alignSelf=\"center\"\n            data-testid=\"cart-total\"\n          >\n            ${getTotalCartValue(items)}\n          </Box>\n        </Box>\n\n        {!isReadOnly && (\n          <Box display=\"flex\" justifyContent=\"flex-end\" className=\"cart-footer\">\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              startIcon={<ShoppingCart />}\n              className=\"checkout-btn\"\n              onClick={(e) => history.push(\"/checkout\")}\n            >\n              Checkout\n            </Button>\n          </Box>\n        )}\n       \n      </Box>\n\n     \n    </>\n  );\n};\n\nexport default Cart;\n","import { AddShoppingCartOutlined } from \"@mui/icons-material\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardMedia,\n  Rating,\n  Typography,\n} from \"@mui/material\";\nimport React from \"react\";\nimport \"./ProductCard.css\";\n\nconst ProductCard = ({ product, handleAddToCart }) => {\n  return (\n    <Card className=\"card\">\n      <CardMedia\n        component=\"img\"\n        height=\"140\"\n        image={product.image}\n        alt=\"green iguana\"\n      />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\n          {product.name}\n        </Typography>\n        <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }} color=\"#000\">\n          ${product.cost}\n        </Typography>\n        <Rating name=\"read-only\" value={product.rating} readOnly />\n      </CardContent>\n      <Button variant=\"contained\" onClick={handleAddToCart}> <AddShoppingCartOutlined /> ADD TO CART</Button>\n    </Card>\n  );\n};\n\nexport default ProductCard;\n","import { Search, SentimentDissatisfied } from \"@mui/icons-material\";\nimport {\n  CircularProgress,\n  Grid,\n  InputAdornment,\n  TextField,\n  Box,\n  Typography\n} from \"@mui/material\";\n// import { Box } from \"@mui/system\";\nimport axios from \"axios\";\n\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { config } from \"../App\";\nimport Cart, { generateCartItemsFrom } from \"./Cart\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport ProductCard from \"./ProductCard\";\nimport \"./Products.css\";\n\n\n\nconst Products = () => {\n  const { enqueueSnackbar } = useSnackbar()\n  const [products, setProducts] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [debounceTimeout, setDebounceTimeout] = useState(0)\n  const [fetchedCart, setFetchedCart] = useState([])\n  const [cartList, setCartList] = useState([])\n\n  const performAPICall = async () => {\n    try {\n      const url = `${config.endpoint}/products`\n      const response = await axios.get(url)\n      const data = response.data\n      setIsLoading(false)\n      //setProducts(data)\n      return data\n    } catch (error) {\n      setIsLoading(false)\n      setProducts([])\n      enqueueSnackbar(error.response.data.message, { variant: \"error\" });\n    }\n  }\n\n  const performSearch = async (text) => {\n    let erres = null;\n    try {\n      const url = config.endpoint + `/products/search?value=${text}`;\n      const response = await axios.get(url);\n\n      if (response) {\n        return response.data;\n      }\n    } catch (error) {\n      if (error.response) {\n        erres = error.response;\n      } else {\n        console.log(error);\n      }\n    }\n    if (erres)\n      return erres.data;\n  };\n\n\n\n  // const performSearch = async (text) => {\n  //   try {\n  //     const response = await axios.get(\n  //       `${config.endpoint}/products/search?value=${text}`\n  //     );\n  //     if (response.data) {\n  //       setError(false)\n  //       setProducts(response.data);\n  //       return response.data;\n  //     }\n  //   } catch (e) {\n  //     if (e.response.status === 404) {\n  //       setError(true)\n  //       setProducts([]);\n\n\n  //     }\n  //   }\n  // };\n\n\n\n  // const debounceSearch = (event, debounceTimeout) => {\n  //   performSearch(event)\n  //   if (debounceTimeout !== 0) {\n  //     clearTimeout(debounceTimeout);\n  //   }\n  //   let timerId = setTimeout(() => performSearch(event.target.value), 500);\n  //   setDebounceTimeout(timerId);\n  // }\n\n  const debounceSearch = (event, debounceTimeout) => {\n    if (debounceTimeout !== 0) {\n      clearTimeout(debounceTimeout);\n    }\n    const timeout = setTimeout(async () => {\n      setProducts(await performSearch(event.target.value));\n    }, 500);\n    setDebounceTimeout(timeout);\n  };\n\n\n  const fetchCart = async (token) => {\n    if (!token) return;\n\n    try {\n\n      const response = await axios.get(config.endpoint + \"/cart\", {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n\n      const data = response.data\n\n      //console.log(data);\n\n      return data\n      // TODO: CRIO_TASK_MODULE_CART - Pass Bearer token inside \"Authorization\" header to get data from \"GET /cart\" API and return the response data\n    } catch (e) {\n      if (e.response && e.response.status === 400) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n      return null;\n    }\n  };\n\n\n\n\n  useEffect(() => {\n    // code to run after render goes here\n    const callApi = async () => {\n      setIsLoading(true)\n      const getProducts = await performAPICall();\n      setIsLoading(false)\n      setProducts(getProducts);\n      // if (localStorage.getItem('username')) {\n      //   const getCart = await fetchCart(localStorage.getItem(\"token\"))\n      //   setFetchedCart(getCart)\n      //   setCartList(generateCartItemsFrom(getCart, getProducts))\n      // }\n      const getCart = await fetchCart(localStorage.getItem(\"token\"))\n      setFetchedCart(getCart)\n      setCartList(generateCartItemsFrom(getCart, getProducts))\n      // console.log(\"inside useeffect\",fetchedcart,res)\n    };\n    callApi();\n// eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n\n  // TODO: CRIO_TASK_MODULE_CART - Return if a product already exists in the cart\n  /**\n   * Return if a product already is present in the cart\n   *\n   * @param { Array.<{ productId: String, quantity: Number }> } items\n   *    Array of objects with productId and quantity of products in cart\n   * @param { String } productId\n   *    Id of a product to be checked\n   *\n   * @returns { Boolean }\n   *    Whether a product of given \"productId\" exists in the \"items\" array\n   *\n   */\n  const isItemInCart = (items, productId) => {\n    const prodIds = items.map((item) => {\n      return item.productId;\n    })\n    return (prodIds.includes(productId));\n  };\n\n  /**\n   * Perform the API call to add or update items in the user's cart and update local cart data to display the latest cart\n   *\n   * @param {string} token\n   *    Authentication token returned on login\n   * @param { Array.<{ productId: String, quantity: Number }> } items\n   *    Array of objects with productId and quantity of products in cart\n   * @param { Array.<Product> } products\n   *    Array of objects with complete data on all available products\n   * @param {string} productId\n   *    ID of the product that is to be added or updated in cart\n   * @param {number} qty\n   *    How many of the product should be in the cart\n   * @param {boolean} options\n   *    If this function was triggered from the product card's \"Add to Cart\" button\n   *\n   * Example for successful response from backend:\n   * HTTP 200 - Updated list of cart items\n   * [\n   *      {\n   *          \"productId\": \"KCRwjF7lN97HnEaY\",\n   *          \"qty\": 3\n   *      },\n   *      {\n   *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n   *          \"qty\": 1\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 404 - On invalid productId\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Product doesn't exist\"\n   * }\n   */\n  const addToCart = async (\n    token,\n    items,\n    products,\n    productId,\n    qty,\n    options = { preventDuplicate: false }\n  ) => {\n    try {\n      // console.log(token,items,products,productId,qty,options)\n      if (!token) {\n        enqueueSnackbar(\"Login to add an item to the Cart\", {\n          variant: \"warning\",\n        });\n      } else if (options.preventDuplicate && isItemInCart(items, productId)) {\n        enqueueSnackbar(\n          \"Item already in cart. Use the cart sidebar to update quantity or remove item.\",\n          { variant: \"warning\" }\n        );\n      } else {\n        //console.log(token,items,products,productId,qty,options)\n        const res = await axios.post(\n          `${config.endpoint}/cart`,\n          { productId: productId, qty: qty },\n          {\n            headers: { Authorization: \"Bearer \" + token }\n          }\n        );\n\n        setFetchedCart(res.data);\n        setCartList(generateCartItemsFrom(res.data, products));\n\n      }\n    } catch (error) {\n      if (error.response && error.response.status === 400) {\n        enqueueSnackbar(error.response.data.message, { variant: \"error\" });\n      }\n    }\n  };\n\n\n\n\n\n\n  return (\n    <div>\n      <Header\n\n        children={\n          (<div className=\"search\">\n            <TextField\n              className=\"search-desktop\"\n              fullWidth\n              size=\"small\"\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <Search color=\"primary\" />\n                  </InputAdornment>\n                ),\n              }}\n              placeholder=\"Search for items/categories\"\n              name=\"search\"\n              //value={search}\n              onChange={(e) => {\n                debounceSearch(e, debounceTimeout);\n              }}\n            />\n          </div>)\n        }\n\n        hasHiddenAuthButtons={false}>\n\n      </Header>\n      <TextField\n        className=\"search-mobile\"\n        fullWidth\n        size=\"small\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Search color=\"primary\" />\n            </InputAdornment>\n          ),\n        }}\n        placeholder=\"Search for items/categories\"\n        name=\"search\"\n        //value={search}\n        onChange={(e) => {\n          debounceSearch(e, debounceTimeout);\n        }}\n      />\n      <Grid container>\n        <Grid item md={localStorage.getItem(\"username\") ? 9 : 12} xs={12}>\n          <Box>\n            <Grid container>\n              <Grid item className=\"product-grid\">\n                <Box className=\"hero\">\n                  <p className=\"hero-heading\">\n                    India’s <span className=\"hero-highlight\">FASTEST DELIVERY</span>{\" \"}\n                    to your door step\n                  </p>\n                </Box>\n              </Grid>\n            </Grid>\n\n            {\n              isLoading ?\n                <div className=\"loading\">\n                  <CircularProgress />\n                  <Typography variant=\"p\" sx={{ marginTop: \"1rem\" }}>Loading Products</Typography>\n                </div> :\n                (products.length === 0 ?\n                  <Grid container sx={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\", height: \"50vh\" }}>\n                    <SentimentDissatisfied />\n                    <Typography variant=\"p\" sx={{ marginTop: \"1rem\" }}>No Products found</Typography>\n                  </Grid> :\n                  (\n                    <Grid container spacing={1} sx={{ padding: \"3rem 4rem\" }} >\n                      {\n                        products && products.map(product => (\n                          <Grid item md={3} sm={6} key={product._id} >\n                            <ProductCard\n                              product={product}\n                              handleAddToCart={() => addToCart(\n                                localStorage.getItem(\"token\"),\n                                fetchedCart,\n                                products,\n                                product._id,\n                                1,\n                                { preventDuplicate: true }\n                              )} />\n                          </Grid>\n                        ))\n\n                      }\n                    </Grid>\n                  ))\n            }\n\n          </Box>\n        </Grid>\n\n        {/* Cart */}\n        {\n          localStorage.getItem(\"username\") ?\n            <Grid item md={3} xs={12} bgcolor=\"#E9F5E1\">\n                <Cart products={products} items={cartList} handleQuantity={addToCart} /> \n            </Grid> :\n            null\n        }\n      </Grid>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default Products;","import { CreditCard, Delete } from \"@mui/icons-material\";\nimport {\n  Button,\n  Divider,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Cart, { getTotalCartValue, generateCartItemsFrom } from \"./Cart\";\nimport \"./Checkout.css\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\n\n// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n *\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem -  - Data on product added to cart\n *\n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} productId - Unique ID for the product\n */\n\n/**\n * @typedef {Object} Address - Data on added address\n *\n * @property {string} _id - Unique ID for the address\n * @property {string} address - Full address string\n */\n\n/**\n * @typedef {Object} Addresses - Data on all added addresses\n *\n * @property {Array.<Address>} all - Data on all added addresses\n * @property {string} selected - Id of the currently selected address\n */\n\n/**\n * @typedef {Object} NewAddress - Data on the new address being typed\n *\n * @property { Boolean } isAddingNewAddress - If a new address is being added\n * @property { String} value - Latest value of the address being typed\n */\n\n// TODO: CRIO_TASK_MODULE_CHECKOUT - Should allow to type a new address in the text field and add the new address or cancel adding new address\n/**\n * Returns the complete data on all products in cartData by searching in productsData\n *\n * @param { String } token\n *    Login token\n *\n * @param { NewAddress } newAddress\n *    Data on new address being added\n *\n * @param { Function } handleNewAddress\n *    Handler function to set the new address field to the latest typed value\n *\n * @param { Function } addAddress\n *    Handler function to make an API call to add the new address\n *\n * @returns { JSX.Element }\n *    JSX for the Add new address view\n *\n */\nconst AddNewAddressView = ({\n  token,\n  newAddress,\n  handleNewAddress,\n  addAddress,\n}) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <TextField\n        multiline\n        minRows={4}\n        placeholder=\"Enter your complete address\"\n        onChange={(e) => {\n          handleNewAddress({\n            ...newAddress,\n            isAddingNewAddress: true,\n            value: e.target.value,\n          });\n        }}\n      />\n      <Stack direction=\"row\" my=\"1rem\">\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            addAddress(token, newAddress);\n          }}\n        >\n          Add\n        </Button>\n        <Button\n          variant=\"text\"\n          onClick={() => {\n            handleNewAddress({ ...newAddress, isAddingNewAddress: false });\n          }}\n        >\n          Cancel\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n\nconst Checkout = () => {\n  const token = localStorage.getItem(\"token\");\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const [items, setItems] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [addresses, setAddresses] = useState({ all: [], selected: \"\" });\n  const [newAddress, setNewAddress] = useState({\n    isAddingNewAddress: false,\n    value: \"\",\n  });\n\n  // Fetch the entire products list\n  const getProducts = async () => {\n    try {\n      const response = await axios.get(`${config.endpoint}/products`);\n\n      setProducts(response.data);\n      return response.data;\n    } catch (e) {\n      if (e.response && e.response.status === 500) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n        return null;\n      } else {\n        enqueueSnackbar(\n          \"Could not fetch products. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  // Fetch cart data\n  const fetchCart = async (token) => {\n    if (!token) return;\n    try {\n      const response = await axios.get(`${config.endpoint}/cart`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      return response.data;\n    } catch {\n      enqueueSnackbar(\n        \"Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON.\",\n        {\n          variant: \"error\",\n        }\n      );\n      return null;\n    }\n  };\n\n  /**\n   * Fetch list of addresses for a user\n   *\n   * API Endpoint - \"GET /user/addresses\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const getAddresses = async (token) => {\n    if (!token) return;\n    console.log(\"getaddress out side working\");\n    try {\n      const response = await axios.get(`${config.endpoint}/user/addresses`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      console.log(\"-----working-----\", response.data);\n      setAddresses({ ...addresses, all: response.data });\n      return response.data;\n    } catch {\n      enqueueSnackbar(\n        \"Could not fetch addresses. Check that the backend is running, reachable and returns valid JSON.\",\n        {\n          variant: \"error\",\n        }\n      );\n      return null;\n    }\n  };\n\n  /**\n   * Handler function to add a new address and display the latest list of addresses\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { NewAddress } newAddress\n   *    Data on new address being added\n   *\n   * @returns { Array.<Address> }\n   *    Latest list of addresses\n   *\n   * API Endpoint - \"POST /user/addresses\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const addAddress = async (token, newAddress) => {\n    try {\n      // TODO: CRIO_TASK_MODULE_CHECKOUT - Add new address to the backend and display the latest list of addresses\n      const response = await axios.post(\n        `${config.endpoint}/user/addresses`,\n        { address: newAddress.value },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      setNewAddress({ ...newAddress, isAddingNewAddress: false });\n      // setNewAddress({ ...newAddress, value: '' })\n      setAddresses({ ...addresses, all: response.data });\n      return response.data;\n    } catch (e) {\n      if (e.response) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not add this address. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  /**\n   * Handler function to delete an address from the backend and display the latest list of addresses\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { String } addressId\n   *    Id value of the address to be deleted\n   *\n   * @returns { Array.<Address> }\n   *    Latest list of addresses\n   *\n   * API Endpoint - \"DELETE /user/addresses/:addressId\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const deleteAddress = async (token, addressId) => {\n    try {\n      // TODO: CRIO_TASK_MODULE_CHECKOUT - Delete selected address from the backend and display the latest list of addresses\n      const url = `${config.endpoint}/user/addresses/${addressId}`;\n      const response = await axios.delete(url, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      setAddresses({ ...addresses, all: response.data });\n      return response.data;\n    } catch (e) {\n      if (e.response) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not delete this address. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_CHECKOUT - Validate request for checkout\n  /**\n   * Return if the request validation passed. If it fails, display appropriate warning message.\n   *\n   * Validation checks - show warning message with given text if any of these validation fails\n   *\n   *  1. Not enough balance available to checkout cart items\n   *    \"You do not have enough balance in your wallet for this purchase\"\n   *\n   *  2. No addresses added for user\n   *    \"Please add a new address before proceeding.\"\n   *\n   *  3. No address selected for checkout\n   *    \"Please select one shipping address to proceed.\"\n   *\n   * @param { Array.<CartItem> } items\n   *    Array of objects with complete data on products added to the cart\n   *\n   * @param { Addresses } addresses\n   *    Contains data on array of addresses and selected address id\n   *\n   * @returns { Boolean }\n   *    Whether validation passed or not\n   *\n   */\n  const validateRequest = (items, addresses) => {\n    if (localStorage.getItem(\"balance\") < getTotalCartValue(items)) {\n      enqueueSnackbar(\n        \"You do not have enough balance in your wallet for this purchase\",\n        { variant: \"error\" }\n      );\n      return false;\n    } else if (addresses.length === 0) {\n      enqueueSnackbar(\"Please add a new address before proceeding.\", {\n        variant: \"error\",\n      });\n      return false;\n    } else if (addresses.selected === \"\") {\n      enqueueSnackbar(\"Please select one shipping address to proceed.\", {\n        variant: \"error\",\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  // TODO: CRIO_TASK_MODULE_CHECKOUT\n  /**\n   * Handler function to perform checkout operation for items added to the cart for the selected address\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { Array.<CartItem } items\n   *    Array of objects with complete data on products added to the cart\n   *\n   * @param { Addresses } addresses\n   *    Contains data on array of addresses and selected address id\n   *\n   * @returns { Boolean }\n   *    If checkout operation was successful\n   *\n   * API endpoint - \"POST /cart/checkout\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *  \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *  \"success\": false,\n   *  \"message\": \"Wallet balance not sufficient to place order\"\n   * }\n   *\n   */\n  const performCheckout = async (token, items, addresses) => {\n    if (validateRequest(items, addresses)) {\n      try {\n        // eslint-disable-next-line\n        const response = await axios.post(\n          `${config.endpoint}/cart/checkout`,\n          { addressId: addresses.selected },\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        );\n\n        //   if (response.data) {\n        localStorage.setItem(\n          \"balance\",\n          localStorage.getItem(\"balance\") - getTotalCartValue(items)\n        );\n        enqueueSnackbar(\"Order placed successfully\", {\n          variant: \"success\",\n        });\n        history.push(\"/thanks\");\n        // }\n      } catch (error) {\n        if (error.response) {\n          enqueueSnackbar(error.response.data.message, { variant: \"error\" });\n        } else {\n          enqueueSnackbar(\n            \"Could not delete this address. Check that the backend is running, reachable and returns valid JSON.\",\n            {\n              variant: \"error\",\n            }\n          );\n        }\n      }\n    }\n  };\n\n  //TODO: CRIO_TASK_MODULE_CHECKOUT - Fetch addressses if logged in, otherwise show info message and redirect to Products page\n\n  // console.log(localStorage.getItem(\"token\"));\n  // Fetch products and cart data on page load\n  useEffect(() => {\n    const onLoadHandler = async () => {\n      if (localStorage.getItem(\"token\")) {\n        console.log(\"if is working\");\n\n        getAddresses(localStorage.getItem(\"token\"));\n\n        const productsData = await getProducts();\n\n        const cartData = await fetchCart(token);\n\n        if (productsData && cartData) {\n          const cartDetails = await generateCartItemsFrom(\n            cartData,\n            productsData\n          );\n          setItems(cartDetails);\n        }\n      } else {\n        enqueueSnackbar(\"you need to log in before checkout\");\n        history.push(\"/\");\n      }\n    };\n    onLoadHandler();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <Grid container>\n        <Grid item xs={12} md={9}>\n          <Box className=\"shipping-container\" minHeight=\"100vh\">\n            <Typography color=\"#3C3C3C\" variant=\"h4\" my=\"1rem\">\n              Shipping\n            </Typography>\n            <Typography color=\"#3C3C3C\" my=\"1rem\">\n              Manage all the shipping addresses you want. This way you won't\n              have to enter the shipping address manually with every order.\n              Select the address you want to get your order delivered.\n            </Typography>\n            <Divider />\n            {addresses.all.length === 0 ? (\n              <Typography my=\"1rem\">\n                No addresses found for this account. Please add one to proceed\n              </Typography>\n            ) : (\n              addresses.all.map((data) => (\n                <Box\n                  className={`address-item ${\n                    addresses.selected ? \"selected\" : \"not-selected\"\n                  }`}\n                  key={data._id}\n                  onClick={(e) => {\n                    setAddresses((currAddress) => ({\n                      ...currAddress,\n                      selected: data._id,\n                    }));\n                  }}\n                >\n                  <Typography variant=\"p\">{data.address}</Typography>\n                  <Button\n                    variant=\"text\"\n                    startIcon={<Delete />}\n                    onClick={(event) => {\n                      deleteAddress(token, data._id);\n                    }}\n                  >\n                    DELETE\n                  </Button>\n                </Box>\n              ))\n            )}\n            {/* TODO: CRIO_TASK_MODULE_CHECKOUT - Dislay either \"Add new address\" button or the <AddNewAddressView> component to edit the currently selected address */}\n            {!newAddress.isAddingNewAddress ? (\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                id=\"add-new-btn\"\n                size=\"large\"\n                onClick={() => {\n                  setNewAddress((currNewAddress) => ({\n                    ...currNewAddress,\n                    isAddingNewAddress: true,\n                  }));\n                }}\n              >\n                Add new address\n              </Button>\n            ) : (\n              <AddNewAddressView\n                token={token}\n                newAddress={newAddress}\n                handleNewAddress={setNewAddress}\n                addAddress={addAddress}\n              />\n            )}\n\n            <Typography color=\"#3C3C3C\" variant=\"h4\" my=\"1rem\">\n              Payment\n            </Typography>\n            <Typography color=\"#3C3C3C\" my=\"1rem\">\n              Payment Method\n            </Typography>\n            <Divider />\n\n            <Box my=\"1rem\">\n              <Typography>Wallet</Typography>\n              <Typography>\n                Pay ${getTotalCartValue(items)} of available $\n                {localStorage.getItem(\"balance\")}\n              </Typography>\n            </Box>\n\n            <Button\n              startIcon={<CreditCard />}\n              variant=\"contained\"\n              onClick={() => {\n                performCheckout(token, items, addresses);\n              }}\n            >\n              PLACE ORDER\n            </Button>\n          </Box>\n        </Grid>\n        <Grid item xs={12} md={3} bgcolor=\"#E9F5E1\">\n          <Cart isReadOnly products={products} items={items} />\n        </Grid>\n      </Grid>\n      <Footer />\n    </>\n  );\n};\n\nexport default Checkout;\n","import { Button } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Thanks.css\";\n\nconst Thanks = () => {\n  const history = useHistory();\n\n  const routeToProducts = () => {\n    history.push(\"/\");\n  };\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      history.push(\"/\");\n    }\n  }, [history]);\n\n  return (\n    <>\n      <Header />\n      <Box className=\"greeting-container\">\n        <h2>Yay! It's ordered 😃</h2>\n        <p>You will receive an invoice for your order shortly.</p>\n        <p>Your order will arrive in 7 business days.</p>\n        <p id=\"balance-overline\">Wallet Balance</p>\n        <p id=\"balance\">${localStorage.getItem(\"balance\")} Available</p>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          id=\"continue-btn\"\n          onClick={routeToProducts}\n        >\n          Continue Shopping\n        </Button>\n      </Box>\n      <Footer />\n    </>\n  );\n};\n\nexport default Thanks;\n","import { createTheme } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: \"Lato\"\n  },\n  variantMapping: {\n    h1: 'h2',\n    h2: 'h2',\n    h3: 'h2',\n    h4: 'h2',\n    h5: 'h2',\n    h6: 'h2',\n    subtitle1: 'h2',\n    subtitle2: 'h2',\n    body1: 'span',\n    body2: 'span',\n  },\n  palette: {\n    primary: {\n      light: \"#45c09f\",\n      main: \"#00a278\",\n      dark: \"#00845c\",\n      contrastText: \"#fff\",\n    },\n  },\n});\n\nexport default theme;\n","import Register from \"./components/Register\";\nimport ipConfig from \"./ipConfig.json\";\n\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Login from \"./components/Login\";\n\nimport Products from \"./components/Products\";\n\nimport Checkout from \"./components/Checkout\";\n\nimport Thanks from \"./components/Thanks\";\n\nimport { ThemeProvider } from \"@mui/material\";\nimport React from \"react\";\n\nimport theme from \"./theme\";\n\nexport const config = {\n  endpoint: `https://qkart-sumeet.herokuapp.com/api/v1`,\n};\n\nfunction App() {\n  return (\n    <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <div className=\"App\">\n          <BrowserRouter>\n            <Switch>\n              <Route exact path=\"/\" component={Products} />\n              <Route path=\"/register\" component={Register} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/checkout\" component={Checkout} />\n              <Route path=\"/thanks\" component={Thanks} />\n            </Switch>\n          </BrowserRouter>\n        </div>\n      </ThemeProvider>\n    </React.StrictMode>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { SnackbarProvider } from \"notistack\";\n// eslint-disable-next-line\nimport { BrowserRouter } from \"react-router-dom\";\n// eslint-disable-next-line\nimport { ThemeProvider } from \"@mui/system\";\n// eslint-disable-next-line\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n        <SnackbarProvider\n          maxSnack={1}\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"center\",\n          }}\n          preventDuplicate\n        >\n          <App />\n        </SnackbarProvider>\n  </React.StrictMode>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}